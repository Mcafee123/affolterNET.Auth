name: Build and Publish NuGet Packages

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.csproj'
      - '**/*.cs'
      - '.github/workflows/nuget-packages.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.csproj'
      - '**/*.cs'
      - '.github/workflows/nuget-packages.yml'
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (e.g., 1.0.0)'
        required: false
        type: string
      publish_to_nuget:
        description: 'Publish to NuGet.org'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'

permissions:
  contents: write       # Required to push commits back to repository
  actions: read         # Required to read workflow artifacts
  pull-requests: write  # Required to create pull requests

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "release" ]; then
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          # Auto-increment patch version for main branch pushes
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            # Get current version from project file
            CURRENT_VERSION=$(grep -oE '<Version>[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?</Version>' affolterNET.Web.Core/affolterNET.Web.Core.csproj | sed -E 's/<\/?Version>//g')
            echo "Current version: $CURRENT_VERSION"
            
            # Parse version components
            MAIN_VERSION=$(echo "$CURRENT_VERSION" | cut -d'-' -f1)
            PRERELEASE=$(echo "$CURRENT_VERSION" | grep -oE '\-[a-zA-Z0-9.]+' || echo "")
            MAJOR=$(echo "$MAIN_VERSION" | cut -d'.' -f1)
            MINOR=$(echo "$MAIN_VERSION" | cut -d'.' -f2)
            PATCH=$(echo "$MAIN_VERSION" | cut -d'.' -f3)
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            
            # Add prerelease suffix if it existed
            if [ -n "$PRERELEASE" ]; then
              NEW_VERSION="$NEW_VERSION$PRERELEASE"
            fi
            
            echo "New version: $NEW_VERSION"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            # Use current version with build number for other branches
            VERSION=$(grep -oE '<Version>[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?</Version>' affolterNET.Web.Core/affolterNET.Web.Core.csproj | sed -E 's/<\/?Version>//g')
            BUILD_NUMBER="${{ github.run_number }}"
            echo "version=${VERSION}-preview.${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Update project versions
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "Setting version to: $VERSION"
        
        # Update version in all project files
        find . -name "*.csproj" -exec sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/g" {} \;
        
        # Display updated versions for verification
        echo "Updated project versions:"
        find . -name "*.csproj" -exec grep -H "<Version>" {} \;

    - name: Commit version changes
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.version == ''
      run: |
        NEW_VERSION="${{ steps.version.outputs.version }}"
        BRANCH_NAME="release/v$NEW_VERSION"
        
        # Delete existing branch if it exists (both local and remote)
        git branch -D "$BRANCH_NAME" 2>/dev/null || true
        git push origin --delete "$BRANCH_NAME" 2>/dev/null || true
        
        # Create fresh release branch
        git checkout -b "$BRANCH_NAME"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add and commit changes
        git add *.csproj */*.csproj
        if git diff --staged --quiet; then
          echo "No version changes to commit"
        else
          git commit -m "chore: bump version to $NEW_VERSION"
          git push origin "$BRANCH_NAME"
          
          # Close existing PR if it exists
          gh pr close "$BRANCH_NAME" 2>/dev/null || true
          
          # Create pull request
          gh pr create \
            --title "Release v$NEW_VERSION" \
            --body "Automated version bump to v$NEW_VERSION" \
            --base main \
            --head "$BRANCH_NAME" \
            --label "release"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build projects
      run: |
        dotnet build affolterNET.Web.Core/affolterNET.Web.Core.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
        dotnet build affolterNET.Web.Api/affolterNET.Web.Api.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
        dotnet build affolterNET.Web.Bff/affolterNET.Web.Bff.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Run tests
      run: |
        # Run tests if test projects exist
        if find . -name "*Test*.csproj" -o -name "*.Tests.csproj" | grep -q .; then
          echo "Running tests..."
          dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger trx --results-directory ./test-results
        else
          echo "No test projects found, skipping tests"
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./test-results/*.trx

  pack-and-publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Update project versions
      run: |
        VERSION="${{ needs.build-and-test.outputs.version }}"
        echo "Setting version to: $VERSION"
        
        # Update version in all project files
        find . -name "*.csproj" -exec sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/g" {} \;

    - name: Switch to NuGet references
      run: |
        ./switch-references.sh nuget
        echo "Switched to NuGet package references for packaging"

    - name: Build projects
      run: |
        dotnet build affolterNET.Web.Core/affolterNET.Web.Core.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
        dotnet build affolterNET.Web.Api/affolterNET.Web.Api.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
        dotnet build affolterNET.Web.Bff/affolterNET.Web.Bff.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Pack NuGet packages
      run: |
        echo "Packing packages with version ${{ needs.build-and-test.outputs.version }}"
        
        # Pack Core package (must be first due to dependencies)
        dotnet pack affolterNET.Web.Core/affolterNET.Web.Core.csproj \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-restore \
          --no-build \
          --output ./packages \
          --include-symbols \
          --include-source \
          -p:SymbolPackageFormat=snupkg
        
        # Pack Api package
        dotnet pack affolterNET.Web.Api/affolterNET.Web.Api.csproj \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-restore \
          --no-build \
          --output ./packages \
          --include-symbols \
          --include-source \
          -p:SymbolPackageFormat=snupkg
        
        # Pack Bff package
        dotnet pack affolterNET.Web.Bff/affolterNET.Web.Bff.csproj \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-restore \
          --no-build \
          --output ./packages \
          --include-symbols \
          --include-source \
          -p:SymbolPackageFormat=snupkg
        
        echo "Created packages:"
        ls -la ./packages/

    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg

    - name: Upload symbol packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-symbol-packages
        path: ./packages/*.snupkg

    - name: Publish to NuGet.org
      if: |
        (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
        (github.event_name == 'release' && github.event.action == 'published') || 
        (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_nuget == 'true')
      run: |
        echo "Publishing packages to NuGet.org..."
        for package in ./packages/*.nupkg; do
          echo "Publishing $package"
          dotnet nuget push "$package" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

    - name: Create release notes
      if: github.event_name == 'release'
      run: |
        echo "## NuGet Packages Published" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Version: ${{ needs.build-and-test.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Packages:" >> $GITHUB_STEP_SUMMARY
        echo "- affolterNET.Web.Core" >> $GITHUB_STEP_SUMMARY
        echo "- affolterNET.Web.Api" >> $GITHUB_STEP_SUMMARY
        echo "- affolterNET.Web.Bff" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "dotnet add package affolterNET.Web.Core --version ${{ needs.build-and-test.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "dotnet add package affolterNET.Web.Api --version ${{ needs.build-and-test.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "dotnet add package affolterNET.Web.Bff --version ${{ needs.build-and-test.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY